{"version":3,"sources":["redux/reducers/postsReducer.js","axios/index.js","utils/index.js","components/PostItem.jsx","components/PostsList.jsx","components/PostDetails.jsx","components/Layout.jsx","App.js","redux/store/index.js","index.js"],"names":["posts","createSlice","name","initialState","isErrored","isLoading","post","lastPostId","reducers","loadPosts","state","savePosts","payload","lastPostRetrieved","children","slice","pop","lastPost","before","kind","data","id","dismissAllPosts","dismissPost","filter","filterPosts","markAsRead","find","findPost","clicked","seePostDetails","postsReducer","reducer","actions","axiosInstance","Axios","create","baseURL","getDate","created_utc","moment","unix","fromNow","loadRedditPosts","dispatch","params","get","isNil","Object","keys","value","map","key","join","buildQueryParams","then","ActionGrid","styled","Grid","DismissButton","Button","StyledListItemText","ListItemText","PostItem","props","setMobileOpen","useDispatch","title","author","thumbnail","num_comments","ListItem","button","onClick","alignItems","ListItemAvatar","Avatar","alt","src","primary","secondary","Typography","component","variant","color","container","justify","item","xs","startIcon","Divider","PostsGrid","StyledDiv","div","PostsList","useSelector","isEmpty","limit","latestPost","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","after","observe","i","length","ref","CircularProgress","StyledCard","Card","StyledImg","img","StyledLink","a","StyledCardMedia","CardMedia","StyledTypography","StyledVideo","video","Media","post_hint","url","secure_media","media_embed","fallbackUrl","reddit_video","fallback_url","mediaEmbedContent","content","replace","parseHtml","controls","autoPlay","loop","duration","type","className","dangerouslySetInnerHTML","__html","href","target","rel","PostDetails","subreddit_name_prefixed","upvote_ratio","score","CardHeader","subheader","CardActions","fontSize","style","flexGrow","Math","floor","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","down","drawerWidth","padding","Layout","window","classes","useTheme","useState","mobileOpen","handleDrawerToggle","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","mdUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","smDown","App","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e348f7f6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findPost = (state, id) =>\n  state.posts.find((post) => {\n    return post.data.id === id;\n  }).data;\n\nconst filterPosts = (state, id) =>\n  state.posts.filter((post) => {\n    return post.data.id !== id;\n  });\n\nconst posts = createSlice({\n  name: \"redditPosts\",\n  initialState: {\n    isErrored: false,\n    isLoading: false,\n    posts: [],\n    post: {},\n    lastPostId: \"\",\n  },\n  reducers: {\n    loadPosts: (state) => {\n      return { ...state, isLoading: true };\n    },\n    savePosts: (state, { payload }) => {\n      const lastPostRetrieved = payload.children.slice(-1).pop();\n      const lastPost =\n        payload.before || lastPostRetrieved\n          ? `${lastPostRetrieved.kind}_${lastPostRetrieved.data.id}`\n          : \"\";\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...state.posts, ...payload.children],\n        lastPostId: lastPost,\n      };\n    },\n    dismissAllPosts: (state) => {\n      return {\n        ...state,\n        posts: [],\n      };\n    },\n    dismissPost: (state, { payload }) => {\n      const posts = filterPosts(state, payload);\n      const post = state.post.data;\n      return {\n        ...state,\n        posts,\n        post: payload === post?.id ? {} : state.post,\n      };\n    },\n    markAsRead: (state, { payload }) => {\n      const post = findPost(state, payload);\n      post.clicked = true;\n    },\n    seePostDetails: (state, { payload }) => {\n      return {\n        ...state,\n        post: payload,\n      };\n    },\n  },\n});\n\nexport const {\n  reducer: postsReducer,\n  actions: {\n    loadPosts,\n    savePosts,\n    dismissAllPosts,\n    dismissPost,\n    markAsRead,\n    seePostDetails,\n  },\n} = posts;\n","import Axios from \"axios\";\n\nexport const axiosInstance = Axios.create({\n  baseURL: `https://www.reddit.com/`,\n});\n","import moment from \"moment\";\nimport { axiosInstance } from \"../axios\";\nimport { isNil } from \"lodash\";\nimport { loadPosts, savePosts } from \"../redux/reducers/postsReducer\";\n\nexport const getDate = (created_utc) => {\n  return moment.unix(created_utc).fromNow();\n};\n\nexport const parseHtml = (content = \"\") =>\n  content.replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\");\n\nconst buildQueryParams = (params) => {\n  if (isNil(params)) return \"\";\n\n  return `?${Object.keys(params)\n    .filter((value) => params[value])\n    .map((key) => `${key}=${params[key] || \"\"}`)\n    .join(\"&\")}`;\n};\n\nexport const loadRedditPosts = (dispatch, params) => {\n  dispatch(loadPosts());\n  axiosInstance.get(`top.json${buildQueryParams(params)}`).then(({ data }) => {\n    dispatch(savePosts(data.data));\n  });\n};\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Grid,\n  Typography,\n  Avatar,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Divider,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  dismissPost,\n  seePostDetails,\n  markAsRead,\n} from \"../redux/reducers/postsReducer\";\nimport { useDispatch } from \"react-redux\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { getDate } from \"../utils\";\n\nconst ActionGrid = styled(Grid)`\n  padding-left: 16px !important;\n  padding-right: 16px !important;\n`;\n\nconst DismissButton = styled(Button)`\n  flex-grow: 1 !important;\n`;\n\nconst StyledListItemText = styled(ListItemText)`\n  & > span {\n    ${({ clicked }) =>\n      clicked ? `color: rgba(0,0,0,.3)` : \"color: #000 !important\"}\n  }\n`;\n\nconst PostItem = (props) => {\n  const { post, setMobileOpen } = props;\n  const dispatch = useDispatch();\n\n  const {\n    id,\n    title,\n    author,\n    thumbnail,\n    num_comments,\n    created_utc,\n    clicked,\n  } = post.data;\n\n  return (\n    <Fragment key={id}>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch(markAsRead(id));\n          dispatch(seePostDetails(post));\n          setMobileOpen(false);\n        }}\n        alignItems={\"flex-start\"}\n      >\n        <ListItemAvatar>\n          <Avatar alt={id} src={thumbnail} />\n        </ListItemAvatar>\n        <StyledListItemText\n          clicked={clicked}\n          primary={title}\n          secondary={\n            <>\n              <Typography\n                component={\"span\"}\n                variant={\"body2\"}\n                color={\"textSecondary\"}\n              >\n                Posted by <strong>u/{author}</strong> {getDate(created_utc)}{\" \"}\n              </Typography>\n            </>\n          }\n        />\n      </ListItem>\n      <ActionGrid container justify={\"center\"} alignItems={\"center\"}>\n        <Grid item xs>\n          <DismissButton\n            startIcon={<DeleteIcon />}\n            onClick={() => {\n              dispatch(dismissPost(id));\n            }}\n          >\n            Dismiss\n          </DismissButton>\n        </Grid>\n        <Grid item xs>\n          <Typography\n            component={\"span\"}\n            variant={\"body2\"}\n            color={\"textSecondary\"}\n          >\n            {`${num_comments} comments`}\n          </Typography>\n        </Grid>\n      </ActionGrid>\n      <Divider />\n    </Fragment>\n  );\n};\n\nexport default PostItem;\n","import React, { useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostItem from \"./PostItem\";\nimport { loadRedditPosts } from \"../utils\";\nimport { isEmpty } from \"lodash\";\n\nconst PostsGrid = styled(Grid)`\n  min-width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n`;\n\nconst StyledDiv = styled.div`\n  display: flex !important;\n  justify-content: center !important;\n`;\n\nconst PostsList = ({ setMobileOpen }) => {\n  const { posts, isLoading, lastPostId } = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  if (isEmpty(posts) && !isLoading) loadRedditPosts(dispatch, { limit: 50 });\n  const latestPost = useRef();\n\n  const lastElementRef = useCallback(\n    (node) => {\n      if (isLoading) return;\n      if (latestPost.current) latestPost.current.disconnect();\n\n      latestPost.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting) {\n          loadRedditPosts(dispatch, { limit: 50, after: lastPostId });\n        }\n      });\n\n      if (node) latestPost.current.observe(node);\n    },\n    [isLoading, dispatch, lastPostId]\n  );\n\n  return (\n    <>\n      <PostsGrid item xs>\n        {posts.map((post, i) => {\n          if (posts.length === i + 1) {\n            return (\n              <div key={post.data.id} ref={lastElementRef}>\n                <PostItem post={post} setMobileOpen={setMobileOpen} />\n              </div>\n            );\n          }\n          return (\n            <PostItem\n              key={post.data.id}\n              post={post}\n              setMobileOpen={setMobileOpen}\n            />\n          );\n        })}\n        {isLoading && (\n          <StyledDiv>\n            <CircularProgress />\n          </StyledDiv>\n        )}\n      </PostsGrid>\n    </>\n  );\n};\n\nexport default PostsList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  CardHeader,\n  Card,\n  CardMedia,\n  CardActions,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { getDate, parseHtml } from \"../utils\";\nimport CommentIcon from \"@material-ui/icons/ChatBubble\";\nimport ScoreIcon from \"@material-ui/icons/TrendingUp\";\nimport { isEmpty } from \"lodash\";\n\nconst StyledCard = styled(Card)`\n  border-radius: 0px !important;\n`;\n\nconst StyledImg = styled.img`\n  max-width: 50% !important;\n`;\n\nconst StyledLink = styled.a`\n  font-weight: bold !important;\n  color: rgba(0, 0, 0, 0.54);\n  text-decoration: none !important;\n`;\n\nconst StyledCardMedia = styled(CardMedia)`\n  display: flex !important;\n  justify-content: center !important;\n`;\n\nconst StyledTypography = styled(Typography)`\n  display: flex !important;\n  align-items: center !important;\n  color: rgba(0, 0, 0, 0.54) !important;\n\n  & > svg {\n    margin-right: 5px !important;\n  }\n`;\n\nconst StyledVideo = styled.video`\n  max-width: 50% !important;\n`;\n\nconst Media = ({ post }) => {\n  const { post_hint, url, secure_media, media_embed } = post.data;\n  switch (post_hint) {\n    case \"image\":\n      return <StyledImg src={url} />;\n    case \"hosted:video\":\n    case \"rich:video\":\n      const fallbackUrl = secure_media?.reddit_video?.fallback_url;\n      const mediaEmbedContent = parseHtml(media_embed?.content);\n      return fallbackUrl ? (\n        <StyledVideo controls autoPlay loop duration>\n          <source src={fallbackUrl} type=\"video/mp4\" />\n        </StyledVideo>\n      ) : (\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{ __html: mediaEmbedContent }}\n        ></div>\n      );\n    default:\n      return (\n        <Typography>\n          <a href={url} target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            {url}\n          </a>\n        </Typography>\n      );\n  }\n};\n\nconst PostDetails = () => {\n  const { post } = useSelector((state) => state);\n\n  const {\n    title,\n    author,\n    created_utc,\n    num_comments,\n    subreddit_name_prefixed,\n    upvote_ratio,\n    score,\n  } = post.data || {};\n\n  return (\n    !isEmpty(post) && (\n      <StyledCard>\n        <CardHeader\n          title={title}\n          subheader={\n            <>\n              <StyledLink\n                href={`https://reddit.com/${subreddit_name_prefixed}`}\n                target={\"_blank\"}\n              >\n                {subreddit_name_prefixed}\n              </StyledLink>{\" \"}\n              • Posted by <strong>u/{author}</strong> {getDate(created_utc)}{\" \"}\n            </>\n          }\n        />\n        <StyledCardMedia>\n          <Media post={post} />\n        </StyledCardMedia>\n        <CardActions>\n          <StyledTypography>\n            <CommentIcon fontSize={\"small\"} />\n            {`${num_comments} comments`}\n          </StyledTypography>\n          <StyledTypography\n            style={{\n              flexGrow: \"1\",\n            }}\n          >\n            <ScoreIcon fontSize={\"small\"} />\n            {`${score} points`}\n          </StyledTypography>\n          <StyledTypography>\n            {`${Math.floor(upvote_ratio * 100)}% upvoted`}\n          </StyledTypography>\n        </CardActions>\n      </StyledCard>\n    )\n  );\n};\n\nexport default PostDetails;\n","import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PostsList from \"./PostsList\";\nimport PostDetails from \"./PostDetails\";\n\nconst drawerWidth = 440;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"md\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"md\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    [theme.breakpoints.down(\"sm\")]: {\n      width: drawerWidth * 0.65,\n    },\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nconst Layout = ({ window }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Reddit posts\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer}>\n        <Hidden mdUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true,\n            }}\n          >\n            <PostsList setMobileOpen={setMobileOpen} />\n          </Drawer>\n        </Hidden>\n        <Hidden smDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            <PostsList setMobileOpen={setMobileOpen} />\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <PostDetails />\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\n\nconst App = () => <Layout />;\n\nexport default App;\n","import { createStore } from \"redux\";\nimport { postsReducer } from \"../reducers/postsReducer\";\n\nconst store = createStore(\n  postsReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}