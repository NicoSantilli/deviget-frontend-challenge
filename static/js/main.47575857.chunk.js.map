{"version":3,"sources":["components/Title.jsx","redux/reducers/postsReducer.js","axios/index.js","utils/index.js","components/PostItem.jsx","components/PostsList.jsx","components/PostDetails.jsx","components/Body.jsx","components/Layout.jsx","App.js","redux/store/index.js","index.js"],"names":["TitleGrid","styled","Grid","Title","title","item","Typography","component","variant","posts","createSlice","name","initialState","isErrored","isLoading","post","lastPostId","reducers","loadPosts","state","savePosts","payload","lastPostRetrieved","children","slice","pop","lastPost","before","kind","data","id","dismissAllPosts","dismissPost","filter","filterPosts","markAsRead","find","findPost","clicked","seePostDetails","postsReducer","reducer","actions","axiosInstance","Axios","create","baseURL","getDate","created_utc","moment","unix","fromNow","loadRedditPosts","dispatch","params","get","isNil","Object","keys","value","map","key","join","buildQueryParams","then","ActionGrid","DismissButton","Button","StyledListItemText","ListItemText","PostItem","useDispatch","author","thumbnail","num_comments","ListItem","button","onClick","alignItems","ListItemAvatar","Avatar","alt","src","primary","secondary","color","container","justify","xs","startIcon","Divider","PostsGrid","StyledDiv","div","PostsList","useSelector","isEmpty","limit","latestPost","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","after","observe","i","length","ref","CircularProgress","StyledCard","Card","StyledImg","img","StyledLink","a","StyledCardMedia","CardMedia","StyledTypography","StyledVideo","video","Media","post_hint","url","secure_media","media_embed","fallbackUrl","reddit_video","fallback_url","mediaEmbedContent","content","replace","parseHtml","controls","autoPlay","loop","type","className","dangerouslySetInnerHTML","__html","href","target","rel","PostDetails","subreddit_name_prefixed","upvote_ratio","score","CardHeader","subheader","CardActions","fontSize","style","flexGrow","Math","floor","BodyGrid","Body","Layout","direction","sm","md","App","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47575857.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nconst TitleGrid = styled(Grid)`\n  padding: 20px 20px 0px 20px;\n  text-align: center;\n`;\n\nconst Title = ({ title }) => (\n  <TitleGrid item>\n    <Typography component={\"span\"} variant={\"h5\"}>\n      {title}\n    </Typography>\n  </TitleGrid>\n);\n\nexport default Title;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findPost = (state, id) =>\n  state.posts.find((post) => {\n    return post.data.id === id;\n  }).data;\n\nconst filterPosts = (state, id) =>\n  state.posts.filter((post) => {\n    return post.data.id !== id;\n  });\n\nconst posts = createSlice({\n  name: \"redditPosts\",\n  initialState: {\n    isErrored: false,\n    isLoading: false,\n    posts: [],\n    post: {},\n    lastPostId: \"\",\n  },\n  reducers: {\n    loadPosts: (state) => {\n      return { ...state, isLoading: true };\n    },\n    savePosts: (state, { payload }) => {\n      const lastPostRetrieved = payload.children.slice(-1).pop();\n      const lastPost =\n        payload.before || lastPostRetrieved\n          ? `${lastPostRetrieved.kind}_${lastPostRetrieved.data.id}`\n          : \"\";\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...state.posts, ...payload.children],\n        lastPostId: lastPost,\n      };\n    },\n    dismissAllPosts: (state) => {\n      return {\n        ...state,\n        posts: [],\n      };\n    },\n    dismissPost: (state, { payload }) => {\n      const posts = filterPosts(state, payload);\n      const post = state.post.data;\n      return {\n        ...state,\n        posts,\n        post: payload === post?.id ? {} : state.post,\n      };\n    },\n    markAsRead: (state, { payload }) => {\n      const post = findPost(state, payload);\n      post.clicked = true;\n    },\n    seePostDetails: (state, { payload }) => {\n      return {\n        ...state,\n        post: payload,\n      };\n    },\n  },\n});\n\nexport const {\n  reducer: postsReducer,\n  actions: {\n    loadPosts,\n    savePosts,\n    dismissAllPosts,\n    dismissPost,\n    markAsRead,\n    seePostDetails,\n  },\n} = posts;\n","import Axios from \"axios\";\n\nexport const axiosInstance = Axios.create({\n  baseURL: `https://www.reddit.com/`,\n});\n","import moment from \"moment\";\nimport { axiosInstance } from \"../axios\";\nimport { isNil } from \"lodash\";\nimport { loadPosts, savePosts } from \"../redux/reducers/postsReducer\";\n\nexport const getDate = (created_utc) => {\n  return moment.unix(created_utc).fromNow();\n};\n\nexport const parseHtml = (content = \"\") =>\n  content.replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\");\n\nconst buildQueryParams = (params) => {\n  if (isNil(params)) return \"\";\n\n  return `?${Object.keys(params)\n    .filter((value) => params[value])\n    .map((key) => `${key}=${params[key] || \"\"}`)\n    .join(\"&\")}`;\n};\n\nexport const loadRedditPosts = (dispatch, params) => {\n  dispatch(loadPosts());\n  axiosInstance.get(`top.json${buildQueryParams(params)}`).then(({ data }) => {\n    dispatch(savePosts(data.data));\n  });\n};\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Grid,\n  Typography,\n  Avatar,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Divider,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  dismissPost,\n  seePostDetails,\n  markAsRead,\n} from \"../redux/reducers/postsReducer\";\nimport { useDispatch } from \"react-redux\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { getDate } from \"../utils\";\n\nconst ActionGrid = styled(Grid)`\n  padding-left: 16px !important;\n  padding-right: 16px !important;\n`;\n\nconst DismissButton = styled(Button)`\n  flex-grow: 1 !important;\n`;\n\nconst StyledListItemText = styled(ListItemText)`\n  & > span {\n    ${({ clicked }) =>\n      clicked ? `color: rgba(0,0,0,.3)` : \"color: #000 !important\"}\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const dispatch = useDispatch();\n\n  const {\n    id,\n    title,\n    author,\n    thumbnail,\n    num_comments,\n    created_utc,\n    clicked,\n  } = post.data;\n\n  return (\n    <Fragment key={id}>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch(markAsRead(id));\n          dispatch(seePostDetails(post));\n        }}\n        alignItems={\"flex-start\"}\n      >\n        <ListItemAvatar>\n          <Avatar alt={id} src={thumbnail} />\n        </ListItemAvatar>\n        <StyledListItemText\n          clicked={clicked}\n          primary={title}\n          secondary={\n            <>\n              <Typography\n                component={\"span\"}\n                variant={\"body2\"}\n                color={\"textSecondary\"}\n              >\n                Posted by <strong>u/{author}</strong> {getDate(created_utc)}{\" \"}\n              </Typography>\n            </>\n          }\n        />\n      </ListItem>\n      <ActionGrid container justify={\"center\"} alignItems={\"center\"}>\n        <Grid item xs>\n          <DismissButton\n            startIcon={<DeleteIcon />}\n            onClick={() => {\n              dispatch(dismissPost(id));\n            }}\n          >\n            Dismiss\n          </DismissButton>\n        </Grid>\n        <Grid item xs>\n          <Typography\n            component={\"span\"}\n            variant={\"body2\"}\n            color={\"textSecondary\"}\n          >\n            {`${num_comments} comments`}\n          </Typography>\n        </Grid>\n      </ActionGrid>\n      <Divider />\n    </Fragment>\n  );\n};\n\nexport default PostItem;\n","import React, { useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostItem from \"./PostItem\";\nimport { loadRedditPosts } from \"../utils\";\nimport { isEmpty } from \"lodash\";\n\nconst PostsGrid = styled(Grid)`\n  min-width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n`;\n\nconst StyledDiv = styled.div`\n  display: flex !important;\n  justify-content: center !important;\n`;\n\nconst PostsList = () => {\n  const { posts, isLoading, lastPostId } = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  if (isEmpty(posts) && !isLoading) loadRedditPosts(dispatch, { limit: 50 });\n  const latestPost = useRef();\n\n  const lastElementRef = useCallback(\n    (node) => {\n      if (isLoading) return;\n      if (latestPost.current) latestPost.current.disconnect();\n\n      latestPost.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting) {\n          loadRedditPosts(dispatch, { limit: 50, after: lastPostId });\n        }\n      });\n\n      if (node) latestPost.current.observe(node);\n    },\n    [isLoading, dispatch, lastPostId]\n  );\n\n  return (\n    <>\n      <PostsGrid item xs>\n        {posts.map((post, i) => {\n          if (posts.length === i + 1) {\n            return (\n              <div key={post.data.id} ref={lastElementRef}>\n                <PostItem post={post} />\n              </div>\n            );\n          }\n          return <PostItem key={post.data.id} post={post} />;\n        })}\n        {isLoading && (\n          <StyledDiv>\n            <CircularProgress />\n          </StyledDiv>\n        )}\n      </PostsGrid>\n    </>\n  );\n};\n\nexport default PostsList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  CardHeader,\n  Card,\n  CardMedia,\n  CardActions,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { getDate, parseHtml } from \"../utils\";\nimport CommentIcon from \"@material-ui/icons/ChatBubble\";\nimport ScoreIcon from \"@material-ui/icons/TrendingUp\";\nimport { isEmpty } from \"lodash\";\n\nconst StyledCard = styled(Card)`\n  border-radius: 0px !important;\n`;\n\nconst StyledImg = styled.img`\n  max-width: 25% !important;\n`;\n\nconst StyledLink = styled.a`\n  font-weight: bold !important;\n  color: rgba(0, 0, 0, 0.54);\n  text-decoration: none !important;\n`;\n\nconst StyledCardMedia = styled(CardMedia)`\n  display: flex !important;\n  justify-content: center !important;\n`;\n\nconst StyledTypography = styled(Typography)`\n  display: flex !important;\n  align-items: center !important;\n  color: rgba(0, 0, 0, 0.54) !important;\n\n  & > svg {\n    margin-right: 5px !important;\n  }\n`;\n\nconst StyledVideo = styled.video`\n  max-width: 25% !important;\n`;\n\nconst Media = ({ post }) => {\n  const { post_hint, url, secure_media, media_embed } = post.data;\n  switch (post_hint) {\n    case \"image\":\n      return <StyledImg src={url} />;\n    case \"hosted:video\":\n    case \"rich:video\":\n      const fallbackUrl = secure_media?.reddit_video?.fallback_url;\n      const mediaEmbedContent = parseHtml(media_embed?.content);\n      return fallbackUrl ? (\n        <StyledVideo controls autoPlay loop>\n          <source src={fallbackUrl} type=\"video/mp4\" />\n        </StyledVideo>\n      ) : (\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{ __html: mediaEmbedContent }}\n        ></div>\n      );\n    default:\n      return (\n        <Typography>\n          <a href={url} target={\"_blank\"} rel={\"noopener noreferrer\"}>\n            {url}\n          </a>\n        </Typography>\n      );\n  }\n};\n\nconst PostDetails = () => {\n  const { post } = useSelector((state) => state);\n\n  const {\n    title,\n    author,\n    created_utc,\n    num_comments,\n    subreddit_name_prefixed,\n    upvote_ratio,\n    score,\n  } = post.data || {};\n\n  return (\n    !isEmpty(post) && (\n      <StyledCard>\n        <CardHeader\n          title={title}\n          subheader={\n            <>\n              <StyledLink\n                href={`https://reddit.com/${subreddit_name_prefixed}`}\n                target={\"_blank\"}\n              >\n                {subreddit_name_prefixed}\n              </StyledLink>{\" \"}\n              • Posted by <strong>u/{author}</strong> {getDate(created_utc)}{\" \"}\n            </>\n          }\n        />\n        <StyledCardMedia>\n          <Media post={post} />\n        </StyledCardMedia>\n        <CardActions>\n          <StyledTypography>\n            <CommentIcon fontSize={\"small\"} />\n            {`${num_comments} comments`}\n          </StyledTypography>\n          <StyledTypography\n            style={{\n              flexGrow: \"1\",\n            }}\n          >\n            <ScoreIcon fontSize={\"small\"} />\n            {`${score} points`}\n          </StyledTypography>\n          <StyledTypography>\n            {`${Math.floor(upvote_ratio * 100)}% upvoted`}\n          </StyledTypography>\n        </CardActions>\n      </StyledCard>\n    )\n  );\n};\n\nexport default PostDetails;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\nimport PostDetails from \"./PostDetails\";\n\nconst BodyGrid = styled(Grid)`\n  padding: 50px !important;\n  min-width: 100%;\n  min-height: 100vh;\n`;\n\nconst Body = () => {\n  return (\n    <BodyGrid item>\n      <PostDetails />\n    </BodyGrid>\n  );\n};\n\nexport default Body;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\nimport Title from \"./Title\";\nimport PostsList from \"./PostsList\";\nimport Body from \"./Body\";\n\nconst StyledDiv = styled.div`\n  width: 100%;\n`;\n\nconst Layout = () => {\n  return (\n    <StyledDiv>\n      <Grid container>\n        <Grid container item direction=\"column\" xs={12} sm={5} md={3}>\n          <Title title={\"Reddit Posts\"} />\n          <PostsList />\n        </Grid>\n        <Grid container item xs={12} sm={7} md={9}>\n          <Body />\n        </Grid>\n      </Grid>\n    </StyledDiv>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\n\nconst App = () => <Layout />;\n\nexport default App;\n","import { createStore } from \"redux\";\nimport { postsReducer } from \"../reducers/postsReducer\";\n\nconst store = createStore(\n  postsReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}